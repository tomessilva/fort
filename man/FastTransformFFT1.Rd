% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ft_fft1_subclass.R
\name{FastTransformFFT1}
\alias{FastTransformFFT1}
\title{\code{FastTransformFFT1} subclass}
\description{
\code{FastTransformFFT1} subclass

\code{FastTransformFFT1} subclass
}
\details{
A specific implementation of a structured fast transform. Inherits from \link{FastTransform}.

In particular, the \code{fft1} type applies the following set of operations to each input (column) vector:

\enumerate{
\item Permute/expand (\eqn{P_1}) rows and pack them into a complex vector \eqn{x};
\item Apply a \eqn{y = D_2 F D_1 x} linear transform, where \eqn{F} represents a complex FFT,
and \eqn{D_i} represent diagonal matrices of random unitary complex values;
\item Unpack complex vector \eqn{y} to real vector and permute/contract (\eqn{P_2}) rows.
}

Note that this transform will be orthonormal only when \eqn{dim\_in = dim\_out = blocksize} (in which case,
both \eqn{P_1} and \eqn{P_2} are permutations).

Otherwise, when \eqn{dim\_in < blocksize}, \eqn{P_1} represents an expansion (rather than a permutation),
and when \eqn{dim\_out < blocksize}, \eqn{P_2} represents a contraction/decimation (rather than a
permutation). When both of these conditions are true, the resulting transform will \emph{not} be exactly
orthogonal or semi-orthogonal, but the rows and columns of the transform are still going to be generally
uncorrelated.

It is \strong{not} recommended that the methods described below are called directly. Instead,
use the methods described in the \code{\link[=fort]{fort()}} documentation, if possible, unless you positively need
low-level access (e.g., to speed up computation on \emph{pre-validated} inputs).
}
\seealso{
\code{\link[=fort]{fort()}}, \link{FastTransform}
}
\section{Super class}{
\code{\link[fort:FastTransform]{fort::FastTransform}} -> \code{FastTransformFFT1}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FastTransformFFT1-new}{\code{FastTransformFFT1$new()}}
\item \href{#method-FastTransformFFT1-fwd_eval}{\code{FastTransformFFT1$fwd_eval()}}
\item \href{#method-FastTransformFFT1-rev_eval}{\code{FastTransformFFT1$rev_eval()}}
\item \href{#method-FastTransformFFT1-calculate_rev_par}{\code{FastTransformFFT1$calculate_rev_par()}}
\item \href{#method-FastTransformFFT1-clone}{\code{FastTransformFFT1$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="as_matrix"><a href='../../fort/html/FastTransform.html#method-FastTransform-as_matrix'><code>fort::FastTransform$as_matrix()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="evaluate"><a href='../../fort/html/FastTransform.html#method-FastTransform-evaluate'><code>fort::FastTransform$evaluate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_dim"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_dim'><code>fort::FastTransform$get_dim()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_inverse"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_inverse'><code>fort::FastTransform$get_inverse()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_logdet"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_logdet'><code>fort::FastTransform$get_logdet()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_n_par"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_n_par'><code>fort::FastTransform$get_n_par()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_ncol"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_ncol'><code>fort::FastTransform$get_ncol()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_norm"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_norm'><code>fort::FastTransform$get_norm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_norm_margin"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_norm_margin'><code>fort::FastTransform$get_norm_margin()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_nrow"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_nrow'><code>fort::FastTransform$get_nrow()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="get_transpose"><a href='../../fort/html/FastTransform.html#method-FastTransform-get_transpose'><code>fort::FastTransform$get_transpose()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="print"><a href='../../fort/html/FastTransform.html#method-FastTransform-print'><code>fort::FastTransform$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fort" data-topic="FastTransform" data-id="summary"><a href='../../fort/html/FastTransform.html#method-FastTransform-summary'><code>fort::FastTransform$summary()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FastTransformFFT1-new"></a>}}
\if{latex}{\out{\hypertarget{method-FastTransformFFT1-new}{}}}
\subsection{Method \code{new()}}{
Object creation function. It is recommended
to call the \code{fort()} function with \code{type = "FastTransformFFT1"},
instead of this method, since \emph{no input validation is
performed by this method}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FastTransformFFT1$new(dim_in, dim_out, blocksize)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dim_in}}{Dimensionality of the input for the forward transform.}

\item{\code{dim_out}}{Dimensionality of the output for the forward transform.}

\item{\code{blocksize}}{Dimensionality of the internal transformation
(\emph{must} be a power of 2).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A matrix with the same number of columns as \code{x}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FastTransformFFT1-fwd_eval"></a>}}
\if{latex}{\out{\hypertarget{method-FastTransformFFT1-fwd_eval}{}}}
\subsection{Method \code{fwd_eval()}}{
Function that performs the forward transform.
Do \emph{not} call this directly unless you know what you are doing:
use the \code{\link{\%*\%.FastTransform}} or \code{FastTransform$evaluate()}
methods instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FastTransformFFT1$fwd_eval(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Input matrix of the \emph{correct} dimensionality}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A matrix with the same number of columns as \code{x}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FastTransformFFT1-rev_eval"></a>}}
\if{latex}{\out{\hypertarget{method-FastTransformFFT1-rev_eval}{}}}
\subsection{Method \code{rev_eval()}}{
Function that performs the inverse transform.
Do \emph{not} call this directly unless you know what you are doing:
use the \code{\link{\%*\%.FastTransform}} or \code{FastTransform$evaluate()}
methods instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FastTransformFFT1$rev_eval(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Input matrix of the \emph{correct} dimensionality}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A matrix with the same number of columns as \code{x}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FastTransformFFT1-calculate_rev_par"></a>}}
\if{latex}{\out{\hypertarget{method-FastTransformFFT1-calculate_rev_par}{}}}
\subsection{Method \code{calculate_rev_par()}}{
Function that calculates and caches the parameters
for the inverse transform. Do not call this directly unless you
know what you are doing. If you need the inverse transform, use
the \code{\link{solve.FastTransform}} or \code{FastTransform$get_inverse()}
methods instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FastTransformFFT1$calculate_rev_par()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The object itself (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FastTransformFFT1-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FastTransformFFT1-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FastTransformFFT1$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
