% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ft_helper.R
\name{fort}
\alias{fort}
\title{Create a fast orthogonal random transform}
\usage{
fort(
  dim_in,
  dim_out = NULL,
  type = "default",
  min_blocksize = 0,
  cache_matrix = TRUE,
  seed = NULL
)
}
\arguments{
\item{dim_in}{Either a scalar indicating the input dimensionality, or a vector of length 2 indicating
the input and output dimensionality of the transform (if dim_out is not specified).}

\item{dim_out}{A scalar indicating the output dimensionality of the transform (not required if the
first parameter is a vector of length 2).}

\item{type}{A string indicating the type of transform to use (optional); current valid options are:
\code{fft2} (i.e. \code{default}).}

\item{min_blocksize}{A numeric value indicating the minimum blocksize of the transform (optional,
default = 0).}

\item{cache_matrix}{Logical that controls whether matrices are cached when as.matrix() is called;
should be set to FALSE if saving memory is important (optional, default = TRUE).}

\item{seed}{If set, defines the seed used to generate the random transform (optional, default = NULL).}
}
\value{
An object of a class inherits from class \code{FastTransform} and which represents a fast linear
transform.
}
\description{
\code{fort()} creates an object (that inherits from class \code{FastTransform}) which represents a fast random
orthogonal \eqn{\mathbb{R}^{dim\_in} \to \mathbb{R}^{dim\_out}} linear transform  (the specific type
being defined by the \code{type} parameter).
}
\details{
The goal of \code{fort()} is to provide an easy and efficient way of calculating fast random rotations (when
\code{dim_in} is the same as \code{dim_out}) or orthogonal transforms (when \code{dim_in} is different from \code{dim_out})
within R, by using a process based on fast linear transforms (such as FFT) to avoid matrix
multiplications, thus reducing the computational complexity of rotating an N-dimensional vector
from \eqn{O(N^{2})} to \eqn{O(N \space log \space N)}.

The specific method used depends on the value passed in the \code{type} parameter, but all methods rely
on alternating between applying permutations (complexity \eqn{O(N)}), diagonal scaling matrices
(complexity \eqn{O(N)}) and structured fast linear transforms (such as the Fast Fourier Transform or
the Fast Walsh-Hadamard Transform, which can be implemented with complexity
\eqn{O(N \space log \space N)}).

More specifically, the \code{default} type (i.e., \code{fft2} type) applies the following set of operations to
each input (column) vector:

\enumerate{
\item Permute/expand (\eqn{P_1}) rows and pack them into a complex vector \eqn{x};
\item Apply a \eqn{y = D_3 F D_2 F D_1 x} linear transformation, where \eqn{F} represents a complex FFT,
and \eqn{D_i} represent diagonal matrices of random unitary complex values;
\item Unpack complex vector \eqn{y} to real vector and permute/contract (\eqn{P_2}) rows.
}

In practice, to apply the fast transform to the columns of a matrix, you should use the \code{\%*\%} operator
as if the output of \code{fort()} was a matrix (e.g., \code{fort(4,6) \%*\% matrix(1:12,4,3)} will output a 6 by 3
matrix that results from applying the transform on the left to the matrix on the right of the \code{\%*\%}
operator).

Objects generated by \code{fort()} are also compatible with other methods applicable to \code{matrix} objects,
such as \code{dim()}, \code{ncol()}, \code{nrow()}, \code{solve()}, \code{t()} and \code{det()}. Furthermore, these object can also
be easily converted to matrices (using \code{as.matrix()}), if required.
}
\examples{
fort(16) # a random orthogonal transform from R^16 to R^16
fort(5,33) # a random transform from R^5 to R^33
fort(c(5,33)) # same as previous line
# apply a random orthogonal transformation to the canonical R^4 basis
fort(4) \%*\% diag(4)
}
\seealso{
\code{\link{FastTransform}}, \code{\link{\%*\%.FastTransform}}, \code{\link[=as.matrix.FastTransform]{as.matrix.FastTransform()}}, \code{\link[=summary.FastTransform]{summary.FastTransform()}}
}
